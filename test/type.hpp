/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: type.idl
  Source: type.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX_TYPE_HPP
#define DDSCXX_TYPE_HPP

#include <vector>
#include <string>

class TestType
{
private:
 std::string k_;
 std::vector<bool> bs_;

public:
  TestType() = default;

  explicit TestType(
    const std::string& k,
    const std::vector<bool>& bs) :
    k_(k),
    bs_(bs) { }

  const std::string& k() const { return this->k_; }
  std::string& k() { return this->k_; }
  void k(const std::string& _val_) { this->k_ = _val_; }
  void k(std::string&& _val_) { this->k_ = _val_; }
  const std::vector<bool>& bs() const { return this->bs_; }
  std::vector<bool>& bs() { return this->bs_; }
  void bs(const std::vector<bool>& _val_) { this->bs_ = _val_; }
  void bs(std::vector<bool>&& _val_) { this->bs_ = _val_; }

  bool operator==(const TestType& _other) const
  {
    (void) _other;
    return k_ == _other.k_ &&
      bs_ == _other.bs_;
  }

  bool operator!=(const TestType& _other) const
  {
    return !(*this == _other);
  }

};

#ifdef POLLUTE_NAMESPACE

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::TestType>::getTypeName()
{
  return "TestType";
}

template <> constexpr allowable_encodings_t TopicTraits<::TestType>::allowableEncodings()
{
  return 0xFFFFFFFEu;
}

template <> constexpr bool TopicTraits<::TestType>::isSelfContained()
{
  return false;
}

template <> constexpr extensibility TopicTraits<::TestType>::getExtensibility()
{
  return extensibility::ext_appendable;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::TestType>::type_map_blob_sz() { return 234; }
template<> constexpr unsigned int TopicTraits<::TestType>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::TestType>::type_map_blob() {
  static const uint8_t blob[] = {
 0x50,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xe1,  0xc8,  0x54,  0xd2,  0xcd,  0xdb,  0x8b, 
 0x41,  0xb3,  0xae,  0x2d,  0x93,  0x99,  0xcc,  0x00,  0x38,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x02,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x28,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0x70,  0x00,  0x8c,  0xe4,  0xb1,  0x6b, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x01, 
 0x7c,  0x9d,  0xf8,  0x01,  0x69,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xa2,  0x13,  0xf4, 
 0x8f,  0x14,  0xf6,  0xc9,  0xef,  0x62,  0x91,  0x0f,  0x9f,  0x0e,  0x45,  0x00,  0x51,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x02,  0x00,  0x11,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x54,  0x65,  0x73,  0x74,  0x54,  0x79,  0x70,  0x65,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0x70,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x6b,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x01,  0x03,  0x00,  0x00,  0x00,  0x62,  0x73,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xa2,  0x13,  0xf4, 
 0x8f,  0x14,  0xf6,  0xc9,  0xef,  0x62,  0x91,  0x0f,  0x9f,  0x0e,  0x45,  0xf1,  0xe1,  0xc8,  0x54,  0xd2, 
 0xcd,  0xdb,  0x8b,  0x41,  0xb3,  0xae,  0x2d,  0x93,  0x99,  0xcc, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::TestType>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xe1,  0xc8,  0x54,  0xd2,  0xcd,  0xdb,  0x8b,  0x41,  0xb3,  0xae,  0x2d, 
 0x93,  0x99,  0xcc,  0x00,  0x3c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xa2,  0x13,  0xf4,  0x8f,  0x14,  0xf6,  0xc9,  0xef,  0x62,  0x91,  0x0f, 
 0x9f,  0x0e,  0x45,  0x00,  0x55,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::TestType>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::TestType>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::TestType)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::TestType>();

namespace {
  static const volatile propvec &properties___TestType = get_type_props<::TestType>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::TestType& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.k(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.bs().size());
      if (!write(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      {
        if (!write(streamer, bool(instance.bs()[i_1])))
          return false;
      }
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::TestType& instance, bool as_key) {
  const auto &props = get_type_props<::TestType>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::TestType& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.k(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.bs().size());
      if (!read(streamer, se_1))
        return false;
      instance.bs().resize(se_1);
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      {
        bool b(false);
        if (!read(streamer, b))
          return false;
        instance.bs()[i_1] = b;
      }
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::TestType& instance, bool as_key) {
  const auto &props = get_type_props<::TestType>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::TestType& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.k(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.bs().size());
      if (!move(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      {
        if (!move(streamer, bool(instance.bs()[i_1])))
          return false;
      }
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::TestType& instance, bool as_key) {
  const auto &props = get_type_props<::TestType>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::TestType& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.k(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      {
        if (!max(streamer, bool(instance.bs()[i_1])))
          return false;
      }
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::TestType& instance, bool as_key) {
  const auto &props = get_type_props<::TestType>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // POLLUTE_NAMESPACE

#endif // DDSCXX_TYPE_HPP
